name: Build and Publish

on:
  push:
    branches:
      - main
    tags:
      - "v*"
      - "[0-9]*"
  pull_request:
  workflow_dispatch:
  
permissions:
  contents: write

jobs:
  build-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Restore
        run: dotnet restore DynamicHead.Blazor.sln

      - name: Build
        run: dotnet build DynamicHead.Blazor.sln --configuration Release --no-restore

      - name: Test
        run: dotnet test DynamicHead.Blazor.sln --configuration Release --no-build --logger trx

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: "**/TestResults/*.trx"
          if-no-files-found: ignore

  package-and-release:
    name: Publish Package and Release
    runs-on: ubuntu-latest
    needs: build-test
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Determine Release Version
        id: version
        run: |
          set -euo pipefail
          raw_ref="${GITHUB_REF_NAME}"
          version="${raw_ref#v}"
          if [ -z "$version" ]; then
            echo "Tag '${raw_ref}' does not contain a version." >&2
            exit 1
          fi
          echo "package_version=$version" >> "$GITHUB_OUTPUT"
          if [[ "$version" == *"-"* ]]; then
            echo "is_prerelease=true" >> "$GITHUB_OUTPUT"
          else
            echo "is_prerelease=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Restore
        run: dotnet restore DynamicHead.Blazor/DynamicHead.Blazor.csproj

      - name: Pack
        run: |
          set -euo pipefail
          version="${{ steps.version.outputs.package_version }}"
          dotnet pack DynamicHead.Blazor/DynamicHead.Blazor.csproj \
            --configuration Release \
            --no-restore \
            -p:PackageVersion="$version" \
            -p:Version="$version" \
            -o artifacts

      - name: Publish to NuGet
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          set -euo pipefail
          if [ -z "${NUGET_API_KEY:-}" ]; then
            echo "NUGET_API_KEY secret is not set." >&2
            exit 1
          fi
          shopt -s nullglob
          packages=(artifacts/*.nupkg)
          if [ ${#packages[@]} -eq 0 ]; then
            echo "No .nupkg files found in artifacts/." >&2
            exit 1
          fi
          for pkg in "${packages[@]}"; do
            dotnet nuget push "$pkg" \
              --api-key "$NUGET_API_KEY" \
              --source https://api.nuget.org/v3/index.json \
              --skip-duplicate
          done
          symbol_packages=(artifacts/*.snupkg)
          for pkg in "${symbol_packages[@]}"; do
            dotnet nuget push "$pkg" \
              --api-key "$NUGET_API_KEY" \
              --source https://api.nuget.org/v3/index.json \
              --skip-duplicate
          done

      - name: Upload Package Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages
          path: artifacts

      - name: Generate Release Notes
        id: notes
        run: |
          set -euo pipefail
          current_tag="${GITHUB_REF_NAME}"
          current_sha="$(git rev-list -n 1 "$current_tag")"
          previous_tag="$(git describe --tags --abbrev=0 "${current_sha}^" 2>/dev/null || true)"
          if [ -n "$previous_tag" ]; then
            git log "${previous_tag}..${current_sha}" --no-merges --pretty=format:'- %s' > release-notes.md
          else
            git log "${current_sha}" --no-merges --pretty=format:'- %s' > release-notes.md
          fi
          if [ ! -s release-notes.md ]; then
            echo "No commits found for release notes; adding placeholder." >&2
            echo "- Initial release." > release-notes.md
          fi
          echo "body_path=release-notes.md" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          prerelease: ${{ steps.version.outputs.is_prerelease == 'true' }}
          body_path: ${{ steps.notes.outputs.body_path }}
          files: |
            artifacts/*.nupkg
            artifacts/*.snupkg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
